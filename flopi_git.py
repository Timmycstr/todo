import logging
import sqlite3
import os
import sys
import random
import uuid
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
    JobQueue,
)

import calendar

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
SELECT_TASK_NAME = 0
SELECT_PRIORITY = 1
SELECT_YEAR, SELECT_MONTH, SELECT_DAY, SELECT_TIME = range(2, 6)
DEADLINE = 6
SELECT_TASK_TO_DELETE = 7
TEAM_MENU = 8
JOIN_TEAM = 9
DISBAND_TEAM = 10
CREATE_NEW_TEAM = 11
DELETE_TEAM = 12

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = "tasks.db"

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ")],
    [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("team")],
    [KeyboardButton("main")],
], resize_keyboard=True)

# –ü–æ–¥–º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã
team_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å", callback_data="join")],
    [InlineKeyboardButton("–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="disband")],
    [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_new")],
    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete")],
    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
])

# –ü—É–ª —Ñ—Ä–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
deadline_phrases = [
    "–£–ø—Å! –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏!",
    "–ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å, –¥–µ–¥–ª–∞–π–Ω –±–ª–∏–∑–∫–æ!",
    "–°–∫–æ–ª—å–∑–∏ –±—ã—Å—Ç—Ä–µ–µ, –∫–∞–∫ –ø–∏–Ω–≥–≤–∏–Ω!",
    "–•–æ–ø-—Ö–æ–ø, –¥–∞–≤–∞–π —Å–∫–æ—Ä–µ–π!",
    "–í—Ä–µ–º—è —Ç–∏–∫–∞–µ—Ç, –¥—Ä—É–∂–æ–∫!",
    "–ù–µ —É–ø—É—Å—Ç–∏ –º–æ–º–µ–Ω—Ç!",
    "–î–∞–≤–∞–π, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
    "–ë—ã—Å—Ç—Ä–µ–µ-–±—ã—Å—Ç—Ä–µ–µ, —É—Ä–∞!",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫ ‚Äî –≤–ø–µ—Ä–µ–¥!",
    "–ú—ã –≤ —Ç–µ–±—è –≤–µ—Ä–∏–º! üêß",
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            description TEXT NOT NULL,
            priority TEXT NOT NULL,
            deadline TEXT,
            chat_id INTEGER NOT NULL
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π tasks
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            team_key TEXT
        )
    """)
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü team_key –≤ tasks
    cursor.execute("PRAGMA table_info(tasks)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'team_key' not in columns:
        cursor.execute("ALTER TABLE tasks ADD COLUMN team_key TEXT")
        cursor.execute("""
            UPDATE tasks 
            SET team_key = (SELECT team_key FROM users WHERE users.user_id = tasks.user_id LIMIT 1)
            WHERE team_key IS NULL
        """)
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è team_key
def get_or_create_team_key(user_id):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT team_key FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result and result[0]:
        team_key = result[0]
    else:
        team_key = str(uuid.uuid4())[:8]
        cursor.execute("INSERT OR REPLACE INTO users (user_id, team_key) VALUES (?, ?)", (user_id, team_key))
        conn.commit()
    
    conn.close()
    return team_key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async def show_tasks(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    team_key = get_or_create_team_key(user_id)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description, priority, deadline FROM tasks WHERE team_key = ?", (team_key,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        message = f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.\n–í–∞—à –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–ª—é—á:\n```\n{team_key}\n```\n\n"
    else:
        message = f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–ª—é—á:\n```\n{team_key}\n```):\n"
        for row in rows:
            task_id, description, priority, deadline = row
            message += f"ID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n–î–µ–¥–ª–∞–π–Ω: {deadline}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if update.message:
        await update.message.reply_text(message, reply_markup=main_keyboard, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.message.reply_text(message, reply_markup=main_keyboard, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    context.user_data['chat_id'] = update.message.chat_id
    context.user_data['user_id'] = update.effective_user.id
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.")
    await show_tasks(update, context)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Å –∫–æ–ø–∏—Ä—É–µ–º—ã–º –∞–¥—Ä–µ—Å–æ–º TON-–∫–æ—à–µ–ª—å–∫–∞
async def about_creator(update: Update, context: CallbackContext) -> None:
    message = (
        "–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ:\n"
        "–ü—Ä–∏–≤–µ—Ç! ‚úåÔ∏è\n"
        "–Ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. üòâ\n"
        "–°–æ–∑–¥–∞–ª –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏. ü™Ñ\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TON-–∫–æ–∏–Ω—ã üíé:\n"
        "–ú–æ–π –∫–æ—à–µ–ª–µ–∫:\n"
        "```\n"
        "ton key\n"
        "```\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—ã—à–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ–º TON-–∫–æ—à–µ–ª—å–∫–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üòª"
    )
    await update.message.reply_text(message, reply_markup=main_keyboard, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_deadlines(context: CallbackContext) -> None:
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, description, priority, deadline, chat_id, team_key FROM tasks")
    rows = cursor.fetchall()
    conn.close()

    now = datetime.now()
    notify_thresholds = [timedelta(hours=24), timedelta(hours=1)]

    for row in rows:
        task_id, user_id, description, priority, deadline_str, chat_id, team_key = row
        try:
            deadline = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
            time_left = deadline - now

            for threshold in notify_thresholds:
                if timedelta(0) < time_left <= threshold:
                    notified_key = f"notified_{task_id}_{threshold.total_seconds()}_{user_id}"
                    if not context.user_data.get(notified_key):
                        hours_left = int(time_left.total_seconds() // 3600)
                        minutes_left = int((time_left.total_seconds() % 3600) // 60)
                        time_str = f"{hours_left} —á {minutes_left} –º–∏–Ω" if hours_left > 0 else f"{minutes_left} –º–∏–Ω"
                        random_phrase = random.choice(deadline_phrases)
                        message = (
                            f"{random_phrase}\n"
                            f"–ó–∞–¥–∞—á–∞: {description}\n"
                            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {time_str}"
                        )
                        if chat_id:
                            await context.bot.send_message(chat_id=chat_id, text=message)
                            context.user_data[notified_key] = True
                        else:
                            logging.warning(f"Chat ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task_id}")
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task_id}: {e}")

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def add_task(update: Update, context: CallbackContext) -> int:
    context.user_data['user_id'] = update.effective_user.id
    context.user_data['chat_id'] = update.message.chat_id
    context.user_data['team_key'] = get_or_create_team_key(context.user_data['user_id'])
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return SELECT_TASK_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def process_task_name(update: Update, context: CallbackContext) -> int:
    task_name = update.message.text.strip()
    if not task_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")
        return SELECT_TASK_NAME

    context.user_data["description"] = task_name
    logging.info(f"–ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞: {task_name}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")

    keyboard = [
        [InlineKeyboardButton("–ù–∏–∑–∫–∏–π üü¢", callback_data="priority_–Ω–∏–∑–∫–∏–π")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π üü®", callback_data="priority_—Å—Ä–µ–¥–Ω–∏–π")],
        [InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π ‚ö†Ô∏è", callback_data="priority_–≤—ã—Å–æ–∫–∏–π")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=reply_markup)
    return SELECT_PRIORITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
async def process_priority(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    priority = query.data.split("_")[1]
    context.user_data["priority"] = priority

    logging.info(f"–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–µ–¥–ª–∞–π–Ω–∞.")
    await query.edit_message_text(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω: {priority}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω.")
    next_state = await start_deadline_selection(query, context)
    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ start_deadline_selection: {next_state}")
    return next_state

# –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
async def start_deadline_selection(query: CallbackQuery, context: CallbackContext) -> int:
    current_year = datetime.now().year
    years = [current_year, current_year + 1, current_year + 2]

    keyboard = [[InlineKeyboardButton(str(year), callback_data=f"year_{year}") for year in years]]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_priority")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    logging.info("–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –≥–æ–¥–∞. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=reply_markup)
    return SELECT_YEAR

# –í—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞
async def select_year(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    year = int(query.data.split("_")[1])
    context.user_data["deadline_year"] = year

    months = []
    for i in range(1, 13):
        months.append([InlineKeyboardButton(calendar.month_name[i], callback_data=f"month_{i}")])

    reply_markup = InlineKeyboardMarkup(months)
    logging.info(f"–í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}")
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–¥: {year}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=reply_markup)
    return SELECT_MONTH

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
async def select_month(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        logging.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞")
        return await start_deadline_selection(query, context)

    month = int(query.data.split("_")[1])
    context.user_data["deadline_month"] = month

    year = context.user_data["deadline_year"]
    days_in_month = calendar.monthrange(year, month)[1]

    days = []
    for day in range(1, days_in_month + 1):
        days.append([InlineKeyboardButton(str(day), callback_data=f"day_{day}")])

    days.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(days)
    logging.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {calendar.month_name[month]}")
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü: {calendar.month_name[month]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=reply_markup)
    return SELECT_DAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
async def select_day(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        logging.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞")
        return await select_month(update, context)

    day = int(query.data.split("_")[1])
    context.user_data["deadline_day"] = day

    times = []
    for hour in range(8, 21):
        for minute in range(0, 60, 15):
            time_str = f"{hour:02d}:{minute:02d}"
            times.append(InlineKeyboardButton(time_str, callback_data=f"time_{time_str}"))

    keyboard = [times[i:i + 4] for i in range(0, len(times), 4)]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    logging.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day}")
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {day}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    return SELECT_TIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def select_time(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        logging.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è")
        return await select_day(update, context)

    time_str = query.data.split("_")[1]
    context.user_data["deadline_time"] = time_str

    year = context.user_data["deadline_year"]
    month = context.user_data["deadline_month"]
    day = context.user_data["deadline_day"]

    full_datetime = f"{year}-{month:02d}-{day:02d} {time_str}"
    context.user_data["deadline"] = full_datetime

    logging.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–¥–ª–∞–π–Ω: {full_datetime}")
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–¥–ª–∞–π–Ω: {full_datetime}.", reply_markup=None)
    return DEADLINE

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def process_deadline(update: Update, context: CallbackContext) -> int:
    deadline = context.user_data.get('deadline')
    user_id = context.user_data.get('user_id')
    chat_id = context.user_data.get('chat_id')
    team_key = context.user_data.get('team_key')

    if deadline is None or user_id is None or chat_id is None or team_key is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ.")
        return ConversationHandler.END

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO tasks (user_id, description, priority, deadline, chat_id, team_key) VALUES (?, ?, ?, ?, ?, ?)""",
            (user_id, context.user_data['description'], context.user_data['priority'], deadline, chat_id, team_key)
        )
        conn.commit()
        task_id = cursor.lastrowid
        conn.close()

        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task_id}")
        await show_tasks(update, context)
        return ConversationHandler.END
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        await show_tasks(update, context)
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã
async def team_menu(update: Update, context: CallbackContext) -> int:
    context.user_data['user_id'] = update.effective_user.id
    team_key = get_or_create_team_key(context.user_data['user_id'])
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–ª—é—á: `{team_key}`\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=team_keyboard, parse_mode='Markdown')
    return TEAM_MENU

# –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
async def join_team(update: Update, context: CallbackContext) -> int:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
    return JOIN_TEAM

async def process_join_team(update: Update, context: CallbackContext) -> int:
    team_key = update.message.text.strip()
    user_id = context.user_data['user_id']
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT team_key FROM users WHERE team_key = ?", (team_key,))
    result = cursor.fetchone()
    
    if result:
        cursor.execute("INSERT OR REPLACE INTO users (user_id, team_key) VALUES (?, ?)", (user_id, team_key))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É —Å –∫–ª—é—á–æ–º `{team_key}`!", parse_mode='Markdown')
        await show_tasks(update, context)
        return ConversationHandler.END
    else:
        conn.close()
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return JOIN_TEAM

# –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def disband_team(update: Update, context: CallbackContext) -> int:
    await update.callback_query.answer()
    user_id = context.user_data['user_id']
    team_key = get_or_create_team_key(user_id)
    await update.callback_query.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `{team_key}`? –≠—Ç–æ —É–±–µ—Ä–µ—Ç –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–∏–º –∑–∞–¥–∞—á–∞–º. (–¥–∞/–Ω–µ—Ç)", 
        parse_mode='Markdown'
    )
    return DISBAND_TEAM

async def process_disband_team(update: Update, context: CallbackContext) -> int:
    response = update.message.text.lower()
    user_id = context.user_data['user_id']
    team_key = get_or_create_team_key(user_id)
    
    if response == "–¥–∞":
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET team_key = NULL WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞—á–∞–º.")
        await show_tasks(update, context)
        return ConversationHandler.END
    elif response == "–Ω–µ—Ç":
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await show_tasks(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return DISBAND_TEAM

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
async def create_new_team(update: Update, context: CallbackContext) -> int:
    await update.callback_query.answer()
    user_id = context.user_data['user_id']
    new_team_key = str(uuid.uuid4())[:8]
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, team_key) VALUES (?, ?)", (user_id, new_team_key))
    conn.commit()
    conn.close()
    
    await update.callback_query.message.reply_text(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∫–ª—é—á–æ–º: `{new_team_key}`", parse_mode='Markdown')
    await show_tasks(update, context)
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def delete_team(update: Update, context: CallbackContext) -> int:
    await update.callback_query.answer()
    user_id = context.user_data['user_id']
    team_key = get_or_create_team_key(user_id)
    await update.callback_query.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É `{team_key}`? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. (–¥–∞/–Ω–µ—Ç)", 
        parse_mode='Markdown'
    )
    return DELETE_TEAM

async def process_delete_team(update: Update, context: CallbackContext) -> int:
    response = update.message.text.lower()
    user_id = context.user_data['user_id']
    team_key = get_or_create_team_key(user_id)
    
    if response == "–¥–∞":
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tasks WHERE team_key = ?", (team_key,))
        cursor.execute("UPDATE users SET team_key = NULL WHERE team_key = ?", (team_key,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ `{team_key}` –∏ –≤—Å–µ –µ—ë –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", parse_mode='Markdown')
        await show_tasks(update, context)
        return ConversationHandler.END
    elif response == "–Ω–µ—Ç":
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await show_tasks(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return DELETE_TEAM

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def delete_task(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    team_key = get_or_create_team_key(user_id)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description FROM tasks WHERE team_key = ?", (team_key,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.", reply_markup=main_keyboard)
        return ConversationHandler.END

    keyboard = []
    for row in rows:
        task_id, description = row
        description = description[:20] + "..." if len(description) > 20 else description
        button = InlineKeyboardButton(f"{description} (ID: {task_id})", callback_data=f"delete_{task_id}")
        keyboard.append([button])

    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_TASK_TO_DELETE

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def confirm_delete_task(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await show_tasks(update, context)
        return ConversationHandler.END

    task_id = int(query.data.split("_")[1])
    user_id = update.effective_user.id
    team_key = get_or_create_team_key(user_id)

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT description FROM tasks WHERE id = ? AND team_key = ?", (task_id, team_key))
        task = cursor.fetchone()
        if not task:
            await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.")
            await show_tasks(update, context)
            conn.close()
            return ConversationHandler.END
        
        cursor.execute("DELETE FROM tasks WHERE id = ? AND team_key = ?", (task_id, team_key))
        conn.commit()
        conn.close()
        
        logging.info(f"Task with ID {task_id} deleted successfully for team {team_key}.")
        await query.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        await show_tasks(update, context)
    except sqlite3.Error as e:
        logging.error(f"Database error while deleting task: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
        await show_tasks(update, context)
        return ConversationHandler.END

    return ConversationHandler.END

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def restart_bot(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", reply_markup=main_keyboard)
    python = sys.executable
    os.execl(python, python, *sys.argv)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_tasks(update, context)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        return await add_task(update, context)
    elif text == "–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ":
        return await about_creator(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        return await delete_task(update, context)
    elif text == "team":
        return await team_menu(update, context)
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await restart_bot(update, context)
    elif text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    elif text == "main":
        return await start(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã
async def handle_team_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    action = query.data

    if action == "join":
        return await join_team(update, context)
    elif action == "disband":
        return await disband_team(update, context)
    elif action == "create_new":
        return await create_new_team(update, context)
    elif action == "delete":
        return await delete_team(update, context)
    elif action == "cancel":
        return await cancel(update, context)
    return TEAM_MENU

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É)$"), add_task),
        MessageHandler(filters.Regex("^(–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É)$"), delete_task),
        MessageHandler(filters.Regex("^(team)$"), team_menu),
    ],
    states={
        SELECT_TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_task_name)],
        SELECT_PRIORITY: [CallbackQueryHandler(process_priority)],
        SELECT_YEAR: [CallbackQueryHandler(select_year)],
        SELECT_MONTH: [CallbackQueryHandler(select_month)],
        SELECT_DAY: [CallbackQueryHandler(select_day)],
        SELECT_TIME: [CallbackQueryHandler(select_time)],
        DEADLINE: [MessageHandler(filters.TEXT, process_deadline)],
        SELECT_TASK_TO_DELETE: [CallbackQueryHandler(confirm_delete_task)],
        TEAM_MENU: [CallbackQueryHandler(handle_team_callback)],
        JOIN_TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_join_team)],
        DISBAND_TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_disband_team)],
        CREATE_NEW_TEAM: [CallbackQueryHandler(create_new_team)],
        DELETE_TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_delete_team)],
    },
    fallbacks=[
        MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞)$"), cancel),
        CommandHandler("cancel", cancel),
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    init_db()

    BOT_TOKEN = "telegram token"

    application = Application.builder().token(BOT_TOKEN).build()

    job_queue = application.job_queue
    if job_queue is not None:
        job_queue.run_repeating(check_deadlines, interval=300, first=10)
    else:
        logging.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è python-telegram-bot —Å [job-queue].")

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()